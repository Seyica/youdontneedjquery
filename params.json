{"name":"You Don't Need jQuery","tagline":"The next evolutive state of, \"You Might Not Need jQuery\", because you definitely don't need jQuery.","body":"# It's 2016; Things Have Changed\r\n\r\n\"You Don't Need jQuery\" is based on [You Might Not Need jQuery](https://github.com/HubSpot/YouMightNotNeedjQuery), but is updated to reflect new APIs, new methodologies, and better, more simplified examples. \r\n\r\n**10 years after jQuery's initial release, the browser landscape has drastically changed.**\r\n\r\nThe purpose of this is not to tell you that you shouldn't use jQuery, but rather to re-educate you on what exactly jQuery is useful for. The DOM, and other browser APIs, have been much better standardized, and many of the previous pitfalls of compatability no longer exist. While jQuery is still useful, it is less so than before, and it's important for you--the developer--to be familiar with the underlying APIs that libraries are abstracting.\r\n\r\nA lot of the new APIs and methodologies are much easier to understand, and are sometimes more coherent than those in libraries like jQuery.\r\n\r\n---\r\n\r\n*[...]* Please take a moment to consider if you actually need jQuery as a dependency; maybe you can include a few lines of utility code, and forgo the requirement. If you're only targeting more modern browsers, you might not need anything more than what the browser ships with.\r\n\r\n*[...]* Some developers believe that jQuery is protecting us from a great demon of browser incompatibility when, in truth, *[modern]* browsers are pretty easy to deal with on their own.\r\n\r\n**- YouMightNotNeedjQuery.com**\r\n\r\n---\r\n\r\n# You Don't Need jQuery\r\n\r\nMost of the APIs that I'll be showing can be [polyfilled](https://en.wikipedia.org/wiki/Polyfill), meaning that if the browser is modern, and supports the APIs, it will use those, but if the browser is legacy, it will update the APIs with the new features, and allow all browsers to work.\r\n\r\n**Modern features that can be polyfilled for legacy browsers:**\r\n- Promise\r\n- fetch\r\n- classList\r\n- Array.from\r\n- More...\r\n\r\nAlthough a couple of the modern examples have more characters in their code, they should not deter you from trying to understand these new APIs. Read carefully, and try to understand what the code is doing so that you can better reflect on whether or not you should use a library.\r\n\r\n---\r\n\r\n## AJAX GET\r\n\r\n**jQuery**\r\n```javascript\r\n$.ajax({\r\n    url: 'path/to/json',\r\n    success: data => {\r\n        // use 'data' here\r\n    },\r\n    error: error => {\r\n        // use 'error' here\r\n    }\r\n});\r\n```\r\n\r\n**Modern** | Using the [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\r\n```javascript\r\nfetch('/path/to/json')\r\n.then(response => response.json())\r\n.then(data => {\r\n    // use 'data' here\r\n})\r\n.catch(error => {\r\n    // use 'error' here\r\n});\r\n```\r\n\r\n---\r\n\r\n## AJAX POST\r\n\r\n**jQuery**\r\n```javascript\r\n$.ajax({\r\n    url: 'path/to/whatever',\r\n    type: 'POST',\r\n    contentType: 'application/json',\r\n    data: JSON.stringify(myObjectHere),\r\n    success: data => {\r\n        // use 'data' here\r\n    },\r\n    error: error => {\r\n        // use 'error' here\r\n    }\r\n});\r\n```\r\n\r\n**Modern** | Using the [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\r\n```javascript\r\nfetch('path/to/whatever', {\r\n    method: 'POST',\r\n    headers: new Headers({ 'Content-Type': 'application/json' }),\r\n    body: JSON.stringify(myObjectHere)\r\n})\r\n.then(response => response.json())\r\n.then(data => {\r\n    // use 'data' here\r\n})\r\n.catch(error => {\r\n    // use 'error' here\r\n});\r\n```\r\n\r\n---\r\n\r\n## Querying the DOM\r\nvia CSS selectors\r\n\r\n**jQuery**\r\n```javascript\r\nconst myElement = $('.foo');\r\n```\r\n\r\n**Modern** | Using [querySelector|All](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\r\n```javascript\r\nconst myElement = document.querySelector('.foo');\r\n// or\r\nconst myMultipleElements = document.querySelectorAll('.foo');\r\n```\r\n\r\n---\r\n\r\n## Element's Class\r\nadd | remove | toggle\r\n\r\n**jQuery**\r\n```javascript\r\n$(myElement).addClass('foo');\r\n$(myElement).removeClass('foo');\r\n$(myElement).toggleClass('foo');\r\n```\r\n\r\n**Modern** | Using the [classList API](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\r\n```javascript\r\nmyElement.classList.add('foo');\r\nmyElement.classList.remove('foo');\r\nmyElement.classList.toggle('foo');\r\n```\r\n\r\n---\r\n\r\n## Attributes\r\nget | set\r\n\r\n**jQuery**\r\n```javascript\r\nconst foo = $(myElement).attr('foo');\r\n$(myElement).attr('bar', foo);\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst foo = myElement.getAttribute('foo');\r\nmyElement.setAttribute('bar', foo);\r\n```\r\n\r\n---\r\n\r\n## Input's Value\r\nget | set\r\n\r\n**jQuery**\r\n```javascript\r\nconst value = $(myElement).val();\r\n$(myElement).val('foo');\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst value = myElement.value;\r\nmyElement.value = 'foo';\r\n```\r\n\r\n---\r\n\r\n## Text & HTML\r\n\r\n**jQuery**\r\n```javascript\r\n$(myElement).text('lorem ispum');\r\n$(myElement).html('<span>lorem ipsum</span>');\r\n```\r\n\r\n**Modern** | Using native properties\r\n```javascript\r\nmyElement.textContent = 'lorem ipsum';\r\nmyElement.innerHTML = '<span>lorem ipsum</span>';\r\n```\r\n\r\n---\r\n\r\n## Data Attributes\r\n\r\n**jQuery**\r\n```javascript\r\n$(myElement).data('foo', 'bar');\r\n```\r\n\r\n**Modern** | Using the [dataset API](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset)\r\n```javascript\r\nmyElement.dataset.foo = 'bar';\r\n```\r\n\r\n---\r\n\r\n## Element Styles\r\n\r\n**jQuery**\r\n```javascript\r\n$(myElement).css({ background: 'red', color: 'white' });\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nmyElement.style.background = 'red';\r\nmyElement.style.color = 'white';\r\n```\r\n\r\n---\r\n\r\n## Append Child & Remove Element\r\nappend | prepend | remove\r\n\r\n**jQuery**\r\n```javascript\r\n$(myElement).append(anotherElement);\r\n$(myElement).prepend(anotherElement);\r\n$(myElement).remove();\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nmyElement.appendChild(anotherElement);\r\nmyElement.insertBefore(anotherElement, myElement.firstChild);\r\nmyElement.remove();\r\n```\r\n\r\n---\r\n\r\n## Event Listeners\r\nadd | remove\r\n\r\n**jQuery**\r\n```javascript\r\n$(myElement).on('click', myEventHandler);\r\n$(myElement).off('click', myEventHandler);\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nmyElement.addEventListener('click', myEventHandler);\r\nmyElement.removeEventListener('click', myEventHandler);\r\n```\r\n\r\n---\r\n\r\n## Filter Elements\r\n\r\n**jQuery**\r\n```javascript\r\n$(myMultipleElements).filter('.some-class-here');\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nArray.from(myMultipleElements).filter(x => x.classList.contains('some-class-here'));\r\n```\r\n\r\n---\r\n\r\n## Find Elements\r\nfrom single | from multiple\r\n\r\n**jQuery**\r\n```javascript\r\nconst x = $(myElement).find('.foo');\r\nconst y = $(myMultipleElements).find('.foo');\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst x = myElement.querySelectorAll('.foo');\r\nconst y = Array.from(myMultipleElements).map(x => Array.from(x.querySelectorAll('.foo'))).reduce((a, b) => a.concat(b));\r\n```\r\n\r\n---\r\n\r\n## Each Element\r\n\r\n**jQuery**\r\n```javascript\r\n$(myMultipleElements).each((i, x) => {\r\n    // use 'x' here\r\n});\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nArray.from(myMultipleElements).forEach((x, i) => {\r\n     // use 'x' here\r\n});\r\n```\r\n\r\n---\r\n\r\n## Parent Element\r\n\r\n**jQuery**\r\n```javascript\r\nconst parent = $(myElement).parent();\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst parent = myElement.parentElement;\r\n```\r\n\r\n---\r\n\r\n## All Parents\r\n\r\n**jQuery**\r\n```javascript\r\nconst x = $(myMultipleElements).parents();\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst parents = Array.from(myMultipleElements).map(x => x.parentElement);\r\n```\r\n\r\n---\r\n\r\n## Children\r\n\r\n**jQuery**\r\n```javascript\r\nconst children = $(myElement).children();\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst children = myElement.children;\r\n```\r\n\r\n---\r\n\r\n## Siblings\r\n\r\n**jQuery**\r\n```javascript\r\nconst siblings = $(myElement).siblings();\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst siblings = Array.from(myElement.parentElement.children).filter(x => x !== myElement);\r\n```\r\n\r\n---\r\n\r\n## Next & Previous Sibling\r\n\r\n**jQuery**\r\n```javascript\r\nconst next = $(myElement).next();\r\nconst prev = $(myElement).prev();\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nconst next = myElement.nextElementSibling;\r\nconst prev = myElement.previousElementSibling;\r\n```\r\n\r\n---\r\n\r\n## Hide & Show Element\r\n\r\n**jQuery**\r\n```javascript\r\n$(myElement).hide();\r\n$(myElement).show();\r\n```\r\n\r\n**Modern**\r\n```javascript\r\nmyElement.style.display = 'none';\r\nmyElement.style.display = null;\r\n```\r\n\r\n---\r\n\r\n**This repo of knowledge is a work in progress; if you'd like to contribute, please submit an issue or a pull request.**\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}