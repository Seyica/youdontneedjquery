{"name":"You Don't Need jQuery","tagline":"The next evolutive state of, \"You Might Not Need jQuery\", because you definitely don't need jQuery.","body":"\"You Don't Need jQuery\" is based on [You Might Not Need jQuery](https://github.com/HubSpot/YouMightNotNeedjQuery), but is updated to reflect new APIs, new methodologies, and better, more simplified examples.\r\n\r\n> [...] Please take a moment to consider if you actually need jQuery as a dependency; maybe you can include a few lines of utility code, and forgo the requirement. If you're only targeting more modern browsers, you might not need anything more than what the browser ships with.\r\n\r\n> [...] Some developers believe that jQuery is protecting us from a great demon of browser incompatibility when, in truth, post-IE8, browsers are pretty easy to deal with on their own.\r\n\r\n> **- youmightnotneedjquery.com**\r\n\r\n---\r\n\r\n# Modern Browsers\r\nBrowsers today are nothing like their legacy counter-parts. The \"big three\"--being Chrome, Firefox, and Edge--are what we call, \"evergreen\", meaning that they self-regulate updates, giving you the most updated engines available. \"**You Don't Need jQuery**\" only focuses on these modern, evergreen browsers. If you need to support more legacy browsers, like IE, try reading [You Might Not Need jQuery](https://github.com/HubSpot/YouMightNotNeedjQuery) instead.\r\n\r\n---\r\n# You Don't Need jQuery\r\n\r\nMost of the APIs that I'll be showing can be [polyfilled](https://en.wikipedia.org/wiki/Polyfill), meaning that you can recreate these features once, and then use all over your code. However, there are some syntax features that I use that will have to be \"transpiled\", using something like [Babel'(https://babeljs.io/)\r\n\r\n---\r\n\r\n## AJAX GET\r\n\r\n**jQuery**\r\n```javascript\r\n$.ajax({\r\n    url: 'path/to/json',\r\n    success: data => {\r\n        // ...\r\n    },\r\n    error: error => {\r\n        // ...\r\n    }\r\n});\r\n```\r\n\r\n**Modern** | Using the [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and [async/await](http://tc39.github.io/ecmascript-asyncawait/)\r\n```javascript\r\n(async () => {\r\n    try {\r\n        const request = await fetch('path/to/json');\r\n        const data = await request.json();\r\n        // ...\r\n    }\r\n    catch (e) {\r\n        // ...\r\n    }\r\n});\r\n```\r\n\r\n---\r\n\r\n## AJAX POST\r\n\r\n**jQuery**\r\n```javascript\r\n$.ajax({\r\n    url: 'path/to/whatever',\r\n    type: 'POST',\r\n    contentType: 'application/json',\r\n    data: JSON.stringify(myObjectHere),\r\n    success: data => {\r\n        // ...\r\n    },\r\n    error: error => {\r\n        // ...\r\n    }\r\n});\r\n```\r\n\r\n**Modern** | Using the [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and [async/await](http://tc39.github.io/ecmascript-asyncawait/)\r\n```javascript\r\n(async () => {\r\n    try {\r\n        const request = await fetch('path/to/whatever', {\r\n            method: 'POST',\r\n            headers: new Headers({ 'Content-Type': 'application/json' }),\r\n            body: JSON.stringify(myObjectHere)\r\n        });\r\n        const data = await request.json();\r\n        // ...\r\n    }\r\n    catch (e) {\r\n        // ...\r\n    }\r\n});\r\n```\r\n\r\n---\r\n\r\nWORK IN PROGRESS","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}